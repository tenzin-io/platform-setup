---
- name: Setup the netinst host
  hosts: netinst

  vars:
    outbound_interface: eth0
    hypervisors_interface: eth1

  vars_files:
    - secrets.yaml
    - hypervisors.yaml

  pre_tasks:
    - name: Check for outbound interface
      stat:
        path: /sys/class/net/{{ outbound_interface }}
      register: check_outbound_interface

    - name: Check for hypervisors interface
      stat:
        path: /sys/class/net/{{ hypervisors_interface }}
      register: check_hypervisors_interface

    - name: Assert that both outbound interface and hypervisors interface exist
      assert:
        that:
          - check_outbound_interface.stat.exists
          - check_hypervisors_interface.stat.exists
        fail_msg: "Required network interfaces {{ outbound_interface }} or {{ hypervisors_interface}} do not exist."
        success_msg: "Both {{ outbound_interface }} and {{ hypervisors_interface }} interfaces exist."

    - name: Setup hypervisors interface
      copy:
        dest: /etc/network/interfaces.d/{{ hypervisors_interface }}
        content: '{{ hypervisor_network_gateway_config }}'
        notify: reload networking

  tasks:
    - name: Install packages
      package:
        name: '{{ item }}'
        state: present
      loop:
        - dnsmasq
        - nginx
        - iptables
        - iptables-persistent

    - name: Set ip_forward
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: true
        reload: true

    - name: Set up NAT with MASQUERADE on outbound interface
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: "{{ outbound_interface }}"
        jump: MASQUERADE

    - name: Allow forwarding from hypervisors interface to outbound interface
      iptables:
        chain: FORWARD
        in_interface: "{{ hypervisors_interface }}"
        out_interface: "{{ outbound_interface }}"
        jump: ACCEPT

    - name: Allow established and related connections from outbound interface to hypervisors_interface
      iptables:
        chain: FORWARD
        in_interface: "{{ outbound_interface }}"
        out_interface: "{{ hypervisors_interface }}"
        match: state
        ctstate: RELATED,ESTABLISHED
        jump: ACCEPT

    - name: Save iptables rules for persistence
      shell: iptables-save > /etc/iptables/rules.v4
      changed_when: False

    - name: Send dnsmasq.conf
      copy:
        src: dnsmasq.conf
        dest: /etc/dnsmasq.conf
      notify: reload dnsmasq

    - name: Create tftpboot dir
      file:
        path: /var/lib/tftpboot
        state: directory
        owner: root
        group: root

    - name: Send autoexec.ipxe
      copy:
        src: autoexec.ipxe
        dest: /var/lib/tftpboot
        owner: dnsmasq
        group: nogroup

    - name: Get iPXE boot files
      get_url:
        url: '{{ item }}'
        dest: /var/lib/tftpboot
        owner: dnsmasq
        group: nogroup
      loop:
        - https://boot.ipxe.org/undionly.kpxe
        - https://boot.ipxe.org/ipxe.efi

    - name: Setup ipxehttp listener
      copy:
        src: ipxehttp.conf
        dest: /etc/nginx/conf.d
      notify: reload nginx
    
    - name: Remove default listener
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: reload nginx

    - name: Create ipxehttp folders
      file:
        path: '{{ item }}'
        state: directory
      loop:
        - /var/www/ipxehttp
        - /var/www/ipxehttp/ubuntu-24.04-live-server-amd64

    - name: Send over ubuntu-install.ipxe
      copy:
        src: ubuntu-install.ipxe
        dest: /var/www/ipxehttp

    - name: Create ipxehttp host folders
      file:
        path: /var/www/ipxehttp/{{ item.hostname }}
        state: directory
      loop: '{{ hypervisors }}'

    - name: Send over user-data
      template:
        src: user-data.j2
        dest: /var/www/ipxehttp/{{ item.hostname }}/user-data
      loop: '{{ hypervisors }}'

    - name: Send over meta-data
      copy:
        dest: /var/www/ipxehttp/{{ item.hostname }}/meta-data
        content: |-
          # placeholder meta-data file for {{ item.hostname }}
      loop: '{{ hypervisors }}'

    - name: Create a symlink to hostname folder
      file:
        src: /var/www/ipxehttp/{{ item.hostname }}
        dest: /var/www/ipxehttp/{{ item.macaddr }}
        state: link
      loop: '{{ hypervisors }}'

    - name: Enable and start services
      service:
        name: '{{ item }}'
        state: started
        enabled: True
      loop:
        - dnsmasq
        - nginx

  handlers:
    - name: reload dnsmasq
      service:
        name: dnsmasq
        state: restarted

    - name: reload networking
      service:
        name: networking
        state: restarted

    - name: reload nginx
      service:
        name: nginx
        state: reloaded