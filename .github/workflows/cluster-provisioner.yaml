name: cluster-provisioner
run-name: "[${{ inputs.cluster_name }}] - terraform ${{ inputs.terraform_action }}"

on:
  workflow_dispatch:
    inputs:
      hypervisor_hostname: 
        description: Hypervisor hostname
        required: true
        type: string
      cluster_name: 
        description: Cluster name
        required: true
        type: string
      cluster_uuid: 
        description: Cluster UUID
        required: true
        type: string
      vpc_cidr: 
        description: VPC network CIDR
        required: true
        type: string
      terraform_action:
        description: Terraform action to execute
        required: true
        default: plan
        type: choice
        options:
          - plan
          - apply
          - destroy
      confirm_approve:
        description: Approve?
        type: boolean
        required: true
        default: false

env:
  WORKFLOW_DIR: 02-cluster-provisioner/terraform
  VAULT_ADDRESS: https://vault.tenzin.io

jobs:
  terraform:
    runs-on: [ubuntu-latest]
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: ${{ env.WORKFLOW_DIR }}

    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.9"
     
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::130900203380:role/tenzin-io.platform-setup
          aws-region: us-east-1

      - name: Get Vault token
        id: vault-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ env.VAULT_ADDRESS }}
          role: tenzin-io.platform-setup
          method: jwt
          exportToken: true
          secrets: |
            secrets/data/github-actions/tailscale tailscale_domain_name | TS_DOMAIN_NAME ;
            secrets/data/github-actions/tailscale tailscale_oauth_client_id | TS_OAUTH_CLIENT_ID ;
            secrets/data/github-actions/tailscale tailscale_oauth_client_secret | TS_OAUTH_CLIENT_SECRET ;
            secrets/data/platform-setup/automation-ssh-user/tenzin-bot SSH_PRIVATE_KEY_ED25519 | SSH_PRIVATE_KEY_ED25519 ;
            secrets/data/vault-users/kubeconfig-publisher username | VAULT_USERNAME ;
            secrets/data/vault-users/kubeconfig-publisher password | VAULT_PASSWORD ;

      - name: Tailscale connection
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ steps.vault-secrets.outputs.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ steps.vault-secrets.outputs.TS_OAUTH_CLIENT_SECRET }}
          tags: tag:ci

      - name: Setup secrets
        run: |
          # make ~/.ssh folder
          test -e ~/.ssh || mkdir ~/.ssh

          # setup tenzin-bot.key
          cat <<EOF > tenzin-bot.key
          ${{ steps.vault-secrets.outputs.SSH_PRIVATE_KEY_ED25519 }}
          EOF
          chmod 0600 tenzin-bot.key

          # setup ssh config
          cat <<EOF > ~/.ssh/config
          StrictHostKeyChecking no
          EOF

      - name: Setup state.config
        run: |-
          cat<<'eof' > state.config
          key    = "terraform/cluster-provisioner/${{ inputs.cluster_name }}-${{ inputs.cluster_uuid }}.tfstate"
          bucket = "tenzin-cloud"
          region = "us-east-1"
          eof

      - name: Setup terraform.tfvars
        run: |-
          cat<<'eof' > terraform.tfvars
          hypervisor_hostname = "${{ inputs.hypervisor_hostname }}.${{ steps.vault-secrets.outputs.TS_DOMAIN_NAME }}"
          cluster_name        = "${{ inputs.cluster_name }}"
          cluster_uuid        = "${{ inputs.cluster_uuid }}"
          vpc_network_cidr    = "${{ inputs.vpc_network_cidr }}"

          # for kubeconfig publishing
          vault_address  = "${{ env.VAULT_ADDRESS }}"
          vault_username = "${{ steps.vault-secrets.outputs.VAULT_USERNAME }}"
          vault_password = "${{ steps.vault-secrets.outputs.VAULT_PASSWORD }}"
          eof

      - name: Run Terraform Init
        run: terraform init -backend-config=state.config
        
      - name: Run Terraform Validate
        run: terraform validate

      - name: Terraform Action
        run: |-
          case ${{ inputs.terraform_action }} in
            plan)
              terraform ${{ inputs.terraform_action }}
              ;;
            apply|destroy)
              terraform ${{ inputs.terraform_action }} -auto-approve=${{ inputs.confirm_approve }}
              ;;
            *)
              echo error: invalid terraform_action
              exit 1
              ;;
          esac
...
